# -*- coding: utf-8 -*-
"""app_dash.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WUSNq3nhfIMLhxGLKNABSnHcVgKf7n6r
"""

import pandas as pd
import plotly.express as px
import re
import dash
from dash import Dash, html, dcc, Input, Output
import dash_bootstrap_components as dbc


df = pd.read_csv("https://raw.githubusercontent.com/chriszapp/datasets/main/books.csv", sep=',',on_bad_lines='skip')

# on veut une colonne avec juste le titre du livre (pas les info complémentaires qui sont en parenthèse)
df['title_book'] = df['title'].str.replace(r'\s*\(.*?\)', '', regex=True)

# création du df réduit pour les graph
df_short = df.head(10)

# UPDATE : Initialisation de l'application
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Créer le graphique initial
fig = px.histogram(df_short, x='title_book', y='  num_pages', histfunc='avg', orientation='v',
                   hover_data={'title_book': True, '  num_pages': True})

fig.update_traces(hovertemplate='Titre: %{x}<br>Nombre de pages : %{y}<extra></extra>')

fig.update_layout(
    xaxis_tickangle=-45,  # Rotation des étiquettes de l'axe X
    xaxis_title='Titre du livre',  # Nom de l'axe X
    yaxis_title='Nombre de pages',  # Nom de l'axe Y
    margin=dict(l=20, r=20, t=30, b=100),  # Marges pour les étiquettes longues
    xaxis_tickfont=dict(size=8)  # Taille des étiquettes plus petite
)
# UPDATE  : Créer le graphique pour l'onglet 2 (top 10 des auteurs les plus présents dans tout le dataset)
top_authors = df['authors'].value_counts().head(10).reset_index()
top_authors.columns = ['authors', 'count']

fig2= px.bar(top_authors, x='authors', y='count')

fig2.update_traces(hovertemplate='Auteur: %{x}<br>Nombre de livres : %{y}<extra></extra>')

fig2.update_layout(
    xaxis_tickangle=-45,
    xaxis_title="Auteur",
    yaxis_title='Nombre de livres',
    margin=dict(l=20, r=20, t=30, b=100),
    xaxis_tickfont=dict(size=8)
    )

# Layout de l'application, ajout de id pour le graph et la liste
app.layout = html.Div([
    # UPDATE
    dbc.NavbarSimple(
        brand="Mon appli avec Dash",
        brand_href="#",
        color="dark",
        dark=True),

    # UPDATE
    html.Br(),
    dbc.Alert("“I declare after all there is no enjoyment like reading! How much sooner one tires of any thing than of a book! When I have a house of my own, I shall be miserable if I have not an excellent library.” -- Jane Austen, Pride and Prejudice ", color="warning"),


    # UPDATE : Ajout de dbc.Tabs pour structurer en onglets
    dbc.Tabs([
        dbc.Tab(label="Onglet 1", children=[
            html.Br(),
            html.H1(children='Graphique en barres : les 10 premiers livres du dataset avec le nombre de pages'),
            dcc.Graph(id='histogram-graph', figure=fig),

            # Liste déroulante des auteurs, ajout de placeholder
            html.Label('Liste des auteurs'),
            dcc.Dropdown(
                id='dropdown-exemple',
                options=[{'label': i, 'value': i} for i in df_short['authors'].unique()],
                value=None,  # Valeur par défaut est None (pas de sélection)
                placeholder="Sélectionnez un auteur"  # placeholder => texte affiché quand rien n'est sélectionné
            ),

            # Saut de ligne pour espacement
            html.Br(),

            # ajout de l'id
            html.Label("Saisie nombre de pages"),
            dcc.Input(id="champ_num_pages", value=None, type='number', placeholder="Renseignez un nb de pages", style={'marginLeft': '20px', 'marginRight': '20px'}),

            #-------------------------- UPDATE ----------------------------#
            # Bouton cible pour l'infobulle
            dbc.Button("Informations complémentaires", id="tooltip-target", outline=True, className="me-1", color="success", size="sm"),

            # Infobulle attachée au bouton
            dbc.Tooltip(
                "Entrez un nombre max de pages pour réduire la liste des livres affichés",
                target="tooltip-target"
            ),
        ]),

        # Onglet 2 avec le graphique top 10 des auteurs les plus présents
        dbc.Tab(label="Onglet 2", children=[
            html.Br(),
            html.H1("Top 10 des auteurs les plus présents dans le dataset"),
            dcc.Graph(id='top-authors-graph', figure=fig2)
        ])
    ])
])

# Rappel pour mettre à jour le graphique en fonction de la saisie d'un nombre de pages
# L'événement déclencheur c'est la sélection d'un auteur OU renseigement d'un nombre de pages => Input
# Ce qui se met à jour : le graphique => output

@app.callback(
    Output('histogram-graph', 'figure'),
    [Input('dropdown-exemple', 'value'),
     Input('champ_num_pages', 'value')]
)

# Modification pour cumuler les filtres
def update_graph(selected_author, nb_pages):
    df_filtre = df_short

    if selected_author:  # Si un auteur est sélectionné
        df_filtre = df_filtre[df_filtre['authors'] == selected_author]

    if nb_pages is not None and nb_pages >= 0:  # Si un nombre de pages est renseigné
        df_filtre = df_filtre[df_filtre['  num_pages'] <= nb_pages]

    # Créer le graphique mis à jour
    fig = px.histogram(df_filtre, x='title_book', y='  num_pages', histfunc='avg', orientation='v',
                                 hover_data={'title_book': True, '  num_pages': True})

    fig.update_traces(hovertemplate='Titre: %{x}<br>Nombre de pages : %{y}<extra></extra>')

    fig.update_layout(
        xaxis_tickangle=-45,
        xaxis_title='Titre du livre',
        yaxis_title='Nombre de pages',
        margin=dict(l=20, r=20, t=30, b=100),
        xaxis_tickfont=dict(size=8)
    )
    return fig

# Exécution de l'application
if __name__ == '__main__':
    app.run(debug=True)